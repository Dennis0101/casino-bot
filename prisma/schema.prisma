// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/* ======================
   User / Wallet / Bets
   ====================== */
model User {
  id           String    @id @db.VarChar(32) // Discord userId
  balance      Int       @default(1000)
  dailyClaimed DateTime?
  banned       Boolean   @default(false)
  bannedUntil  DateTime?
  clientSeed   String?
  createdAt    DateTime  @default(now())

  bets         Bet[]
  seats        Seat[]
  walletTxs    WalletTx[]

  @@index([createdAt])
  @@index([balance])
  @@index([banned])
}

model Bet {
  id          String     @id @default(cuid())
  userId      String
  tableId     String?
  roundId     String?
  game        GameType
  amount      Int
  outcome     Outcome
  odds        Float      @default(1.0)         // 총지급배수(원금 포함)
  delta       Int                               // 순손익
  meta        Json?       @db.JsonB
  commitHash  String?
  serverSeed  String?
  clientSeed  String?
  nonce       Int?
  createdAt   DateTime   @default(now())

  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  table  Table?     @relation(fields: [tableId], references: [id], onDelete: SetNull)
  round  GameRound? @relation(fields: [roundId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
  @@index([tableId, createdAt])
  @@index([game, createdAt])
  @@index([roundId])
}

/* ======================
   Tables / Seats / Rounds
   ====================== */
model Table {
  id          String       @id @default(cuid())
  type        GameType
  status      TableStatus  @default(OPEN)
  channelId   String
  messageId   String?
  minPlayers  Int          @default(2)
  maxPlayers  Int          @default(6)
  stateJson   Json?        @db.JsonB
  shoeJson    Json?        @db.JsonB
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  seats       Seat[]
  bets        Bet[]
  rounds      GameRound[]

  @@index([channelId])
  @@index([type, status])
  @@index([messageId])     // ← 기존 @@unique 대신 인덱스로 교체 (중복 데이터 있어도 push 가능)
}

model Seat {
  id        String   @id @default(cuid())
  tableId   String
  userId    String
  joinedAt  DateTime @default(now())

  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tableId, userId])
  @@index([userId, joinedAt])
}

model GameRound {
  id         String    @id @default(cuid())
  tableId    String
  game       GameType
  no         Int
  startedAt  DateTime  @default(now())
  endedAt    DateTime?
  messageId  String?
  result     Json?     @db.JsonB
  winners    Json?     @db.JsonB

  table      Table     @relation(fields: [tableId], references: [id], onDelete: Cascade)
  bets       Bet[]
  walletTxs  WalletTx[]   // ↔ WalletTx.round 와 짝

  @@unique([tableId, no])
  @@index([tableId, startedAt])
}

/* ======================
   Wallet Transactions
   ====================== */
model WalletTx {
  id        String    @id @default(cuid())
  userId    String
  amount    Int
  reason    TxReason
  refBetId  String?
  tableId   String?
  roundId   String?
  meta      Json?      @db.JsonB
  createdAt DateTime   @default(now())

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  round     GameRound? @relation(fields: [roundId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
  @@index([tableId, createdAt])
  @@index([roundId])
}

/* ======================
   Enums
   ====================== */
enum GameType {
  BLACKJACK
  BACCARAT
  SLOTS
}

enum TableStatus {
  OPEN
  RUNNING
  SETTLING
  CLOSED
}

enum Outcome {
  WIN
  LOSE
  PUSH
  BANKER
  PLAYER
  TIE
}

enum TxReason {
  BET
  PAYOUT
  BONUS
  DAILY
  MANUAL_ADJ
}
